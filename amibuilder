#!/bin/bash
DEBUG=0
SECONDS=0
RED='\033[0;31m'
NC='\033[0m' # No Color
GREEN='\033[0;32m'
echo "####################################################"
echo -e "${GREEN}Initializing the build process ...${NC}"
echo "####################################################"


if [ $DEBUG -ne 0 ]; then
    echo "Enabling Terraform debugs"
    TF_LOG="trace"
else
    echo "Disabling Terraform debugs"
    TF_LOG="off"
fi

# Init Terraform to run against AWS EC2 before starting the build
docker run -it --rm --name ami_builder -v ~/.ssh:/root/.ssh \
           -v ${PWD}/aws:/root/.aws -v ${PWD}/iso:/root/iso \
           -v ${PWD}/ansible/ssh_config:/root/.ssh/config  \
           -v ${PWD}:/root/terraform \
           -w /root/terraform akshshar/xrv9kami \
           /bin/bash -c "export TF_LOG=$TF_LOG && /usr/bin/terraform init"

if [ $? -ne 0 ]; then
   echo -e "${RED}Failed to initialize terraform for AWS AMI build, exiting...${NC}"
   duration=$SECONDS
   echo "$(($duration / 60)) mins $(($duration % 60)) seconds elapsed."
   exit 1
else

    echo "####################################################"
    echo -e "${GREEN}Starting build ... ${NC}"
    echo "####################################################"

    # Build AMI using AWS metal spot instance 
    docker run -it --rm --name ami_builder -v ~/.ssh:/root/.ssh \
               -v ${PWD}/aws:/root/.aws -v ${PWD}/iso:/root/iso \
               -v ${PWD}/ansible/ssh_config:/root/.ssh/config  \
               -v ${PWD}:/root/terraform \
               -w /root/terraform akshshar/xrv9kami \
               /bin/bash -c "export TF_LOG=$TF_LOG && /usr/bin/terraform apply --auto-approve"
    if [ $? -ne 0 ]; then
        echo -e "${RED}Failed to apply terraform plan for AWS AMI build, proceed to destroy as applicable ...${NC}"
        # Destroy the entire build setup
        docker run -it --rm --name ami_builder -v ~/.ssh:/root/.ssh \
                   -v ${PWD}/aws:/root/.aws -v ${PWD}/iso:/root/iso \
                   -v ${PWD}/ansible/ssh_config:/root/.ssh/config  \
                   -v ${PWD}:/root/terraform \
                   -w /root/terraform akshshar/xrv9kami \
                   /bin/bash -c " export TF_LOG=$TF_LOG && /usr/bin/terraform destroy --auto-approve"
        duration=$SECONDS
        echo "$(($duration / 60)) mins $(($duration % 60)) seconds elapsed."
        exit 1
    else

        echo "#######################################################################################"
        echo -e "${GREEN} Preserving the final AMI image before destroying the build setup ...${NC}"
        echo "#######################################################################################"
        # Remove the final AMI image from Terraform state before destruction
        docker run -it --rm --name ami_builder -v ~/.ssh:/root/.ssh \
                   -v ${PWD}/aws:/root/.aws -v ${PWD}/iso:/root/iso \
                   -v ${PWD}/ansible/ssh_config:/root/.ssh/config  \
                   -v ${PWD}:/root/terraform \
                   -w /root/terraform akshshar/xrv9kami \
                   /bin/bash -c "export TF_LOG=$TF_LOG && /usr/bin/terraform state rm aws_ami_copy.final_ami"


        if [ $? -ne 0 ];then 
            echo -e "${RED}Failed to remove final AMI resource from terraform plan, destroy the setup. Might need to rerun the build proces${NC}"
            docker run -it --rm --name ami_builder -v ~/.ssh:/root/.ssh \
                   -v ${PWD}/aws:/root/.aws -v ${PWD}/iso:/root/iso \
                   -v ${PWD}/ansible/ssh_config:/root/.ssh/config  \
                   -v ${PWD}:/root/terraform \
                   -w /root/terraform akshshar/xrv9kami \
                   /bin/bash -c "export TF_LOG=$TF_LOG && /usr/bin/terraform destroy --auto-approve"

            duration=$SECONDS
            echo "$(($duration / 60)) mins $(($duration % 60)) seconds elapsed."
            exit 1
        else
            echo "#######################################################################################"
            echo -e "${GREEN} Image built! Bring down the build setup before terminating ...${NC}"
            echo "#######################################################################################"
            # Destroy the setup leaving behind the AMI image
            docker run -it --rm --name ami_builder -v ~/.ssh:/root/.ssh \
                       -v ${PWD}/aws:/root/.aws -v ${PWD}/iso:/root/iso \
                       -v ${PWD}/ansible/ssh_config:/root/.ssh/config  \
                       -v ${PWD}:/root/terraform \
                       -w /root/terraform akshshar/xrv9kami \
                       /bin/bash -c "export TF_LOG=$TF_LOG && /usr/bin/terraform destroy --auto-approve"
            duration=$SECONDS
            echo "$(($duration / 60)) mins $(($duration % 60)) seconds elapsed."
            exit 1
        fi
    fi
fi
